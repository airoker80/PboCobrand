package com.paybyonline.Activity;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.NavigationView;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Html;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.loopj.android.http.RequestParams;
import com.paybyonline.Adapter.Model.ServiceCatagoryDetails;
import com.paybyonline.Adapter.Model.ServiceType;
import com.paybyonline.Adapter.ParentRecycleViewAdapter;
import com.paybyonline.Fragment.CustomerSimSalesFragment;
import com.paybyonline.Fragment.DashboardSlidingFragment;
import com.paybyonline.Fragment.FavouriteServicesFragment;
import com.paybyonline.Fragment.NetBankingFragment;
import com.paybyonline.Fragment.ProfileFragment;
import com.paybyonline.Fragment.RechargeBuyFragment;
import com.paybyonline.Fragment.RechargedDetailsFragment;
import com.paybyonline.Fragment.ReportFragment;
import com.paybyonline.Fragment.SendMoneyDetailsFragment;
import com.paybyonline.Fragment.SettingFragment;
import com.paybyonline.Fragment.SimDetailsFragment;
import com.paybyonline.Fragment.TransactionReportFragment;
import com.paybyonline.Fragment.UserNotificationFragment;
import com.paybyonline.Fragment.WalletFragment;
import com.paybyonline.R;
import com.paybyonline.configuration.PayByOnlineConfig;
import com.paybyonline.serverdata.PboServerRequestHandler;
import com.paybyonline.serverdata.PboServerRequestListener;
import com.paybyonline.usersession.MyUserSessionManager;
import com.paybyonline.usersession.ShowMyAlertProgressDialog;
import com.paybyonline.usersession.UserDeviceDetails;
import com.paybyonline.usersession.UserInstalledApplicationDetails;
import com.squareup.picasso.Picasso;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.List;
import cz.msebera.android.httpclient.Header;


public class DashBoardActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,View.OnClickListener {

    Fragment fragment=null;
    CoordinatorLayout coordinatorLayout;
    MyUserSessionManager myUserSessionManager;
    UserDeviceDetails userDeviceDetails;
    private static String url;
    boolean instanceStateNull = false;
    ShowMyAlertProgressDialog showMyAlertProgressDialog;
    ParentRecycleViewAdapter parentRecycleViewAdapter;
    NavigationView navigationView;
    public static MenuItem advSearchItem ;
    private PboServerRequestHandler pboServerRequestHandler;

    TextView dashboard;
    TextView wallet;
    TextView buyPage;
    TextView profile;
    TextView simSales;
    TextView contactUs;
    TextView sendMoneyDetails;
    TextView report;
    TextView userBalance;
    TextView userHoldManeyBalanceStatus;
    TextView settingLink;
    TextView simDetails;
    TextView signOut;
    ImageView profile_image;
    public final static int REQUEST_CODE_PICK_CONTACTS= 1;
    LinearLayout userNotification;
    LinearLayout fabServices;
    TextView notificationCount;
    TextView fabServicesCount;
    TextView txtbalance;

    String facebookUrl = "";
    String twitterUrl = "";
    String googlePlusUrl = "";
    String gmailUrl = "";
    String yahooMailUrl = "";
    String viberUrl = "";
    String skypeUrl = "";
    String linkedinUrl = "";
    String microsoftOutlookUrl = "";
    UserInstalledApplicationDetails userInstalledApplicationDetails;
    String isPinCodePresent = "NO";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dash_board);
        coordinatorLayout = (CoordinatorLayout) findViewById(R.id.coordinatorLayout);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        toolbar.setTitle("DashBoard");
        toolbar.setLogo(R.mipmap.ic_launcher);

        showMyAlertProgressDialog=new ShowMyAlertProgressDialog(getApplicationContext());
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);

        url =  PayByOnlineConfig.SERVER_URL;
        myUserSessionManager = new MyUserSessionManager(this);
        if (!myUserSessionManager.isUserLoggedIn()) {
            startActivity(new Intent(getApplicationContext(),
                    LoginActivity.class));
            finish();
            return;
        }

        if (!myUserSessionManager.ifUserHasCountry()) {
            startActivity(new Intent(getApplicationContext(),
                    AfterRegistration.class));
            finish();
            return;
        }

        userDeviceDetails = new UserDeviceDetails(this);
        navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        dashboard = (TextView)findViewById(R.id.dashboard);
        notificationCount = (TextView)findViewById(R.id.notificationCount);
        fabServicesCount = (TextView)findViewById(R.id.fabServicesCount);
        userBalance = (TextView)findViewById(R.id.userBalance);
        userHoldManeyBalanceStatus = (TextView)findViewById(R.id.userHoldManeyBalanceStatus);
        txtbalance = (TextView)findViewById(R.id.txtbalance);
        wallet = (TextView)findViewById(R.id.wallet);
        buyPage = (TextView)findViewById(R.id.buyPage);
        simSales = (TextView)findViewById(R.id.simSales);
        report = (TextView)findViewById(R.id.report);
        settingLink =(TextView)findViewById(R.id.settingTxt);
        contactUs = (TextView)findViewById(R.id.contactUs);
        simDetails = (TextView)findViewById(R.id.simDetails);
        profile = (TextView)findViewById(R.id.profile);
        signOut = (TextView)findViewById(R.id.signOut);
        sendMoneyDetails = (TextView)findViewById(R.id.sendMoneyDetails);
        fabServices = (LinearLayout) findViewById(R.id.fabServices);
        userNotification = (LinearLayout) findViewById(R.id.userNotification);
        profile_image = (ImageView)findViewById(R.id.profile_image);

        profile_image.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                selectPageToDisplay(R.id.profile,false,"");
            }
        });


        //ClickListener
        userNotification.setOnClickListener(this);
        sendMoneyDetails.setOnClickListener(this);
        fabServices.setOnClickListener(this);
        dashboard.setOnClickListener(this);
        report.setOnClickListener(this);
        wallet.setOnClickListener(this);
        signOut.setOnClickListener(this);
        simDetails.setOnClickListener(this);
        buyPage.setOnClickListener(this);
        contactUs.setOnClickListener(this);
        simSales.setOnClickListener(this);
        settingLink.setOnClickListener(this);
        profile.setOnClickListener(this);

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        android.support.v7.app.ActionBarDrawerToggle toggle = new android.support.v7.app.ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open,
                R.string.navigation_drawer_close);

        drawer.setDrawerListener(toggle);
        toggle.syncState();

        final ActionBar ab = getSupportActionBar();
        ab.setHomeAsUpIndicator(R.mipmap.ic_menu_black_24dp);
        ab.setDisplayHomeAsUpEnabled(true);

        if (savedInstanceState == null) {
            instanceStateNull = true;
            loadUserMenuDetails();
        }

    }

    public void loadUserMenuDetails(){
        RequestParams params = new RequestParams();
        params.put("parentTask", "rechargeApp");
//        params.put("childTask", "getAccountSummary");
        params.put("childTask", "getUserMenuDetails");
        params.put("userCode", myUserSessionManager.getSecurityCode());
        params.put("authenticationCode", myUserSessionManager.getAuthenticationCode());
        params.put("role", "USER");
        pboServerRequestHandler = PboServerRequestHandler.getInstance(coordinatorLayout,DashBoardActivity.this);
        pboServerRequestHandler.makeRequest(PayByOnlineConfig.SERVER_ACTION, "Please Wait !!!", params, new PboServerRequestListener() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {

                try {
                    handleLoadUserMenuDetailsResponse(response);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });


    }

    public void handleLoadUserMenuDetailsResponse(JSONObject response)throws JSONException {
        JSONObject jsonObject = response;
        Log.i("res ", "" + jsonObject);

        if (jsonObject.getString("msg").equals("Success")) {

            if(response.has("userDetails")){
                JSONObject userDetails = response.getJSONObject("userDetails");

                String userBalance = userDetails.getString("userBalance");
                String currencyCode = userDetails.getString("currencyCode");
                String userCountry = "";
                if(userDetails.has("userCountry")){
                    userCountry = userDetails.getString("userCountry");
                }
                //String userCountry = userDetails.getString("userCountry");
                String hasPinCode = userDetails.has("hasPinCode") ? userDetails.getString("hasPinCode") : "NO";
                String userPhoto = userDetails.getString("userPhoto");
                String notViewNotification = userDetails.getString("notViewNotification");
                String favouriteServicesCount = userDetails.getString("favouriteServicesCount");
                Double holdMoneyAmount = Double.parseDouble(userDetails.getString("holdMoneyAmount"));
                if(userDetails.has("gnData")){
                    JSONObject obj = userDetails.getJSONObject("gnData");
                    setUserDetails(userCountry,currencyCode,userBalance,userPhoto,notViewNotification,favouriteServicesCount,hasPinCode,holdMoneyAmount,
                            obj.getString("Viber").toString(),
                            obj.getString("Facebook").toString(),
                            obj.getString("Twitter").toString(),
                            obj.getString("Google_plus").toString(),
                            obj.getString("Gmail").toString(),
                            obj.getString("Yahoo").toString(),
                            obj.getString("Skype").toString(),
                            obj.getString("Linkedin").toString(),
                            obj.getString("Microsoft_Outlook").toString());
                }else{
                    setUserDetails(userCountry,currencyCode,userBalance,userPhoto,notViewNotification,favouriteServicesCount,hasPinCode,holdMoneyAmount,"", "", "", "", "", "", "", "", "");
                }

            }

            Bundle bundle = getIntent().getExtras();
            if(bundle==null){
                showDefaultPage();
            }else{
                String defaultPage= bundle.getString("defaultPage");
                if(defaultPage!=null){
                    switch (defaultPage){
                        case "SendMoney":
                            selectPageToDisplay(R.id.sendMoneyDetails,false,"");
                            break;
                        case "AddMoney":
                            selectPageToDisplay(R.id.wallet,false,"");
                            break;
                        default:
//                            showDefaultPage();
                            selectPageToDisplay(R.id.buyPage,false,"");
                            break;
                    }
                }else{
                    showDefaultPage();
//                    selectPageToDisplay(R.id.buyPage,false,"");
                }
            }



        }else{
            userDeviceDetails.showToast("Error Occurred. Please try again !!!");
        }
    }


    public void showDefaultPage(){
        if(myUserSessionManager.getKeyDefaultPage().length()>0){
            switch (myUserSessionManager.getKeyDefaultPage()){
                case "Dashboard":
                    selectPageToDisplay(R.id.dashboard,false,"");
                    break;
                case "Buy/Recharge":
                    selectPageToDisplay(R.id.buyPage,false,"");
                    break;
                case "Add Money":
                    selectPageToDisplay(R.id.wallet,false,"");
                    break;
                case "Send Money":
                    selectPageToDisplay(R.id.sendMoneyDetails,false,"");
                    break;
                case "Report":
                    selectPageToDisplay(R.id.report,false,"");
                    break;
                default:
                    selectPageToDisplay(R.id.buyPage,false,"");
                    break;
            }
        }else{
            selectPageToDisplay(R.id.buyPage,false,"");
        }
    }

    public String getPinCodeStatus(){
        return isPinCodePresent;
    }

    public void updateUserBalance(String currencyCode, String userCurrentBalance, Double holdMoneyAmount){
        userBalance.setText("");
        userHoldManeyBalanceStatus.setText("");
        userBalance.setText(currencyCode+" "+userCurrentBalance);

        /*if((Double.parseDouble(userCurrentBalance))<0){
            txtbalance.setText("On Credit : ");
        }else{
            txtbalance.setText("Balance : ");
        }*/
        if(holdMoneyAmount>0){
            userHoldManeyBalanceStatus.setText("Hold Amount : "+holdMoneyAmount);
            userHoldManeyBalanceStatus.setVisibility(View.VISIBLE);
        }else{
            userHoldManeyBalanceStatus.setVisibility(View.GONE);
        }
    }


    public void updateUserPhoto(String userPhoto){
        Picasso.with(DashBoardActivity.this)
                .load(userPhoto)
                .placeholder(R.mipmap.ic_launcher)
                .error(R.mipmap.ic_launcher)
                .into(profile_image);
    }

    public void setUserDetails(String userCountry, String currencyCode,String userCurrentBalance, String userPhoto,String notViewNotificationCount,String favouriteServicesCount,String hasPinCode,Double holdMoneyAmount,
                               String viber, String facebook, String twitter,
                               String google_plus, String gmail, String yahoo,
                               String skype, String linkedin, String outlook){

        myUserSessionManager.addUserCountryName(userCountry);

        updateUserBalance(currencyCode,userCurrentBalance,holdMoneyAmount);
        isPinCodePresent = hasPinCode;
        notificationCount.setText(notViewNotificationCount);
        fabServicesCount.setText(favouriteServicesCount);

        updateUserPhoto(userPhoto);

        viberUrl = viber;
        facebookUrl = facebook;
        twitterUrl = twitter;
        googlePlusUrl = google_plus;
        gmailUrl = gmail;
        yahooMailUrl = yahoo;
        skypeUrl = skype;
        linkedinUrl = linkedin;
        microsoftOutlookUrl = outlook;

    }

    @Override
    public void onBackPressed() {

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {

            drawer.closeDrawer(GravityCompat.START);

        } else {

            super.onBackPressed();

        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        // Inflate the menu; this adds items to the action bar if it is present.
        // getMenuInflater().inflate(R.menu.main, menu);
        // return true;
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.dash_board, menu);
//        MenuItem itemAddMoney = menu.findItem(R.id.addMoney);
//        MenuItem sendMoneyItem = menu.findItem(R.id.sendMoney);
//        itemAddMoney.setVisible(false);
//        sendMoneyItem.setVisible(false);
//        MenuItem addServices = menu.findItem(R.id.addServices);
        advSearchItem = menu.findItem(R.id.trans_adv_search);;
//        addServices.setVisible(false);
        advSearchItem.setVisible(false);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {

            case R.id.trans_adv_search:

                TransactionReportFragment  reportFragment = (TransactionReportFragment) fragment;
                reportFragment.advanceSearchModel(DashBoardActivity.this);
                return true;

        /*    case R.id.nibl:
                startActivity(new Intent(DashBoardActivity.this,OnlineBankingActivity.class));
                return true;*/


            case R.id.btnGplus:
                userShare("Google+", googlePlusUrl);
                return true;
            case R.id.btnFb:
                userShare("Facebook", facebookUrl);
                return true;
            case R.id.btnTwitter:
                userShare("Twitter", twitterUrl);
                return true;
            case R.id.btnGmail:
                userShare("Gmail", gmailUrl);
                return true;
            case R.id.btnYahooMail:
                userShare("Yahoo Mail", yahooMailUrl);
                return true;
            case R.id.btnViber:
                userShare("Viber", viberUrl);
                return true;
            case R.id.btnSkype:
                userShare("Skype", skypeUrl);
                return true;
            case R.id.btnLinkedin:
                userShare("Linkedin", linkedinUrl);
                return true;
            case R.id.btnMicrosoftOutlook:
                userShare("Microsoft Outlook", microsoftOutlookUrl);
                return true;

            default:
                return super.onOptionsItemSelected(item);
        }

    }

    public void userShare(String appName, String appUrl) {

        userInstalledApplicationDetails = new UserInstalledApplicationDetails(DashBoardActivity.this);
        Boolean appInstalled = userInstalledApplicationDetails.checkIfApplicationIsInstalled(appName);
        if (appInstalled) {
            String subject = "PayByOnline Invitation";
            //  String text = "https://www.paybyonline.com/rechargeSystem/home?param1=ydlK6%2BtpJtRxiZ3iiAIuWQ%3D%3D&param2=v6RtqzCBJnmY3DlhjtOEKg%3D%3D&param4=pkBFXCv4RGXjh97HKf0sSi%2FqXFNUqwmIPnL5%2FL7Vtu8%3D";
            if (googlePlusUrl.length() > 0) {
                startSharingApplication(subject, appUrl, userInstalledApplicationDetails.getPackageName());
            } else {
                userDeviceDetails.showToast("Please Wait While Loading....");
            }
            // startSharingApplication(subject,text,userInstalledApplicationDetails.getPackageName());
        } else {
            Toast.makeText(DashBoardActivity.this, appName + " Not Installed. Please Install to share", Toast.LENGTH_SHORT).show();
        }
    }

    public void startSharingApplication(String subject, String text, String packageName) {

        Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);
        shareIntent.setType("text/plain");
        shareIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
        shareIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
        shareIntent.putExtra(Intent.EXTRA_TEXT, text);
        shareIntent.setPackage(packageName);
        startActivity(shareIntent);
    }


    public void showConfirmLogOutForm(){
        final AlertDialog builder = new AlertDialog.Builder(this)
                .setPositiveButton("OK", null)
                .setNegativeButton("CANCEL", null)
                .setMessage("Are you sure to sign out?")
                .create();

        builder.setTitle("Confirmation");

        builder.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {

                final Button btnAccept = builder.getButton(android.support.v7.app.
                        AlertDialog.BUTTON_POSITIVE);

                btnAccept.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        builder.dismiss();
                        myUserSessionManager.logoutUser();
                    }
                });

                final Button btnDecline = builder.getButton(DialogInterface.BUTTON_NEGATIVE);

                btnDecline.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        builder.dismiss();

                    }
                });
            }
        });

        /* Show the dialog */
        builder.show();
    }


    public void selectPageToDisplay(int id, Boolean saveFragmentBackstack,String backPageName) {

        // fragment = getSupportFragmentManager().findFragmentByTag(String.valueOf(id) + "tag");
//        fragment = getSupportFragmentManager().findFragmentByTag(String.valueOf(id)+"tag");
//        Log.i("fragment",""+fragment);

//        if(fragment!=null){

        switch (id){

            case R.id.signOut:
                showConfirmLogOutForm();
                break;

            case R.id.settingTxt:
                fragment = new SettingFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
            /*case R.id.nibl:
                fragment = new NetBankingFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;*/
            case R.id.sendMoneyDetails:
                resetSelectedPageDrawable(sendMoneyDetails);
                fragment = new SendMoneyDetailsFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
            case R.id.purchaseReport:
                fragment = new RechargedDetailsFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
            case R.id.simDetails:
                resetSelectedPageDrawable(simDetails);
                fragment = new SimDetailsFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

            case R.id.fabServices:
                fragment = new FavouriteServicesFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
            case R.id.userNotification:
                fragment = new UserNotificationFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

            case R.id.profile:
                fragment = new ProfileFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

            case R.id.dashboard:
                resetSelectedPageDrawable(dashboard);
                fragment = new DashboardSlidingFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

            case R.id.wallet:
                resetSelectedPageDrawable(wallet);
                fragment = new WalletFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

           /* case R.id.recharge:

                fragment = new RechargePageFragment();
                setCurrentFragment(saveFragmentBackstack,id);
                break;*/

            case R.id.buyPage:
                resetSelectedPageDrawable(buyPage);
//                fragment = new BuyProductFragment();
                fragment = new RechargeBuyFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
            case R.id.simSales:
                resetSelectedPageDrawable(simSales);
                fragment = new CustomerSimSalesFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

           /* case R.id.growNetwork:

                fragment = new GrowNetworkFragment();
                closeDrawer();
                setCurrentFragment(saveFragmentBackstack,id);
                break;*/

            case R.id.report:
                resetSelectedPageDrawable(report);
                fragment = new TransactionReportFragment();
//                fragment = new ReportFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;

            case R.id.contactUs:

                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(PayByOnlineConfig.CONTACT_URL));
                startActivity(browserIntent);
               /* resetSelectedPageDrawable(contactUs);
                fragment = new ContactUsFragment();
                setCurrentFragment(saveFragmentBackstack,id);*/
                break;

            default:
                resetSelectedPageDrawable(buyPage);
                fragment = new RechargeBuyFragment();
                setCurrentFragment(saveFragmentBackstack,id,backPageName);
                break;
        }
        closeDrawer();

      /*  }else{

            fragment = new DashboardSlidingFragment();
            Toast.makeText(getApplicationContext(),"DashboardSlide Clicked", Toast.LENGTH_SHORT).show();
            closeDrawer();
        }*/

    }


    View currentSelectedPage;

    public void resetSelectedPageDrawable(View selectedView){
        if(currentSelectedPage!=null){
            currentSelectedPage.setBackground(ContextCompat.getDrawable(DashBoardActivity.this, R.drawable.nav_menu_normal_state));
        }
        currentSelectedPage = selectedView;
        currentSelectedPage.setBackground(ContextCompat.getDrawable(DashBoardActivity.this, R.drawable.nav_menu_selected_item));
    }


    public void setCurrentFragment(Boolean saveFragmentBackstack, int id, String backPageName){
        FragmentManager fragmentManager = getSupportFragmentManager();

        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
        if (saveFragmentBackstack) {
            fragmentTransaction.addToBackStack(null);
        }

        if(backPageName.length()>0){
            Bundle args = new Bundle();
            args.putString("returnPage",backPageName);
            fragment.setArguments(args);
        }

        fragmentTransaction.replace(R.id.content_frame, fragment,String.valueOf(id)+"tag");
        fragmentTransaction.commit();
    }

    @Override
    public boolean onNavigationItemSelected(MenuItem item) {

        // Handle navigation view item clicks here.

       /* if (item.getItemId() == R.id.logout) {

            showLogoutConfirmation();

        } else {
            selectPageToDisplay(item.getItemId(), true);

            // Highlight the selected item, update the title, and close the drawer
            item.setChecked(true);
            setTitle(item.getTitle());
            DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
            drawer.closeDrawer(GravityCompat.START);
        }*/

        return false;
    }

   /* public void setTitle(String title) {
      getSupportActionBar().setTitle(title);
    }*/

    @Override
    public void onClick(View view) {
        int selectedId=view.getId();
        selectPageToDisplay(selectedId, true,"");



    }

    public void closeDrawer(){
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
    }

    @Override
    public void onActivityResult(int reqCode, int resultCode, Intent data) {

        super.onActivityResult(reqCode, resultCode, data);
    /*    Toast.makeText(getApplicationContext(), "reqCode : "+fileName,
                Toast.LENGTH_LONG).show();*/

        switch (reqCode) {

            case REQUEST_CODE_PICK_CONTACTS :

                if (data != null) {
                    Uri result = data.getData();

                    Cursor c = getContentResolver().query(
                            ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,
                            ContactsContract.CommonDataKinds.Phone._ID + "=?",
                            new String[]{result.getLastPathSegment()}, null);

                    if (c.getCount() >= 1 && c.moveToFirst()) {

                        final String number = c.getString(c.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                        final String name = c.getString(c.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
                    }
                }
                break;

        }
    }
    public void HttpAsyncTaskUserBalance() {

        RequestParams params = new RequestParams();
        Log.i("HttpAsyncTaskUserBal","dashboard");
        params.put("parentTask", "rechargeApp");
        params.put("childTask", "userBalances");
        params.put("userCode", myUserSessionManager.getSecurityCode());
        params.put("authenticationCode", myUserSessionManager.getAuthenticationCode());
        //   params.put("authenticationCode", userSessionManager.getAuthenticationCode());

        PboServerRequestHandler handler = PboServerRequestHandler.getInstance(coordinatorLayout,
                DashBoardActivity.this);
        handler.makeRequest(PayByOnlineConfig.SERVER_ACTION, "", params,
                new PboServerRequestListener() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, JSONObject response) {

                try {
                    Log.i("PboServerRequestHandler", "dashboard");
                    httpAsyncTaskUserBalanceResponse(response);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                //Toast.makeText(getApplicationContext(), "JSONObject "+response+"",Toast.LENGTH_LONG).show();
            }
        });

    }
    public void httpAsyncTaskUserBalanceResponse(JSONObject response) throws JSONException {

        JSONObject json= new JSONObject();;
        String connectionStatus;
        String currency;
        String currentBalance;
        // String userOverviews;
        try {


            json = response;
            // connectionStatus = json.getString("connectionStatus");
            Log.i("UserBalanceResponse", "" + response);

            currency = json.getString("currency").toString();
            currentBalance = json.getString("currentBalance").toString();
            userBalance.setText(Html.fromHtml( currency + " "
                    + currentBalance));

            userHoldManeyBalanceStatus.setVisibility(View.GONE);
            String numberOnly[]=currency.split("-");

            if((Double.parseDouble(currentBalance))<0){

                userHoldManeyBalanceStatus.setVisibility(View.VISIBLE);
                userHoldManeyBalanceStatus.setText("On Credit");
            }

        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            JSONObject res = new JSONObject();
            try {
                res.put("connectionStatus", "failed");
            } catch (JSONException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }

        }
    }

}


